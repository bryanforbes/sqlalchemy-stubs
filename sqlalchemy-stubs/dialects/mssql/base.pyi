from typing import Any, Optional
from ... import types as sqltypes
from ...types import INTEGER as INTEGER, BIGINT as BIGINT, SMALLINT as SMALLINT, DECIMAL as DECIMAL, NUMERIC as NUMERIC, \
    FLOAT as FLOAT, DATETIME as DATETIME, DATE as DATE, BINARY as BINARY, \
    TEXT as TEXT, VARCHAR as VARCHAR, NVARCHAR as NVARCHAR, CHAR as CHAR, NCHAR as NCHAR

class REAL(sqltypes.REAL):
    __visit_name__: str = ...

class TINYINT(sqltypes.Integer):
    __visit_name__: str = ...

class TIME(sqltypes.TIME):
    __visit_name__: str = ...

class _DateTimeBase(object): ...

class SMALLDATETIME(_DateTimeBase, sqltypes.DateTime):
    __visit_name__: str = ...

class DATETIME2(_DateTimeBase, sqltypes.DateTime):
    __visit_name__: str = ...

class DATETIMEOFFSET(sqltypes.TypeEngine):
    __visit_name__: str = ...

    def __init__(self, precision: Optional[int] = None, **kwargs: Any) -> None: ...

class TIMESTAMP(sqltypes._Binary):
    __visit_name__: str = ...

    def __init__(self, convert_int: bool = False) -> None: ...

class ROWVERSION(TIMESTAMP):
    __visit_name__: str = ...

class NTEXT(sqltypes.UnicodeText):
    __visit_name__: str = ...

class VARBINARY(sqltypes.VARBINARY, sqltypes.LargeBinary):
    __visit_name__: str = ...

class IMAGE(sqltypes.LargeBinary):
    __visit_name__: str = ...

class XML(sqltypes.Text):
    __visit_name__: str = ...

class BIT(sqltypes.TypeEngine):
    __visit_name__: str = ...

class MONEY(sqltypes.TypeEngine):
    __visit_name__: str = ...

class SMALLMONEY(sqltypes.TypeEngine):
    __visit_name__: str = ...

class UNIQUEIDENTIFIER(sqltypes.TypeEngine):
    __visit_name__: str = ...

class SQL_VARIANT(sqltypes.TypeEngine):
    __visit_name__: str = ...
