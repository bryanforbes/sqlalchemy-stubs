from typing import Any, Optional, TypeVar, Generic
from .base import Executable as Executable
from .elements import ColumnElement as ColumnElement
from .selectable import FromClause as FromClause
from . import util as sqlutil
from . import sqltypes
from .schema import Sequence
from .visitors import VisitableType as VisitableType
from .type_api import TypeEngine

_T = TypeVar('_T')

def register_function(identifier, fn, package: str = ...): ...

class FunctionElement(Executable, ColumnElement[_T], FromClause, Generic[_T]):  # type: ignore
    # ColumnElement.foreign_keys() is not compatible with FromClause.foreign_keys()
    packagenames: Any = ...
    clause_expr: Any = ...
    def __init__(self, *clauses, **kwargs) -> None: ...
    @property
    def columns(self): ...
    @property
    def clauses(self): ...
    def over(self, partition_by: Optional[Any] = ..., order_by: Optional[Any] = ...,
             rows: Optional[Any] = ..., range_: Optional[Any] = ...): ...
    def within_group(self, *order_by): ...
    def filter(self, *criterion): ...
    def get_children(self, **kwargs): ...
    def within_group_type(self, within_group): ...
    def alias(self, name: Optional[Any] = ..., flat: bool = ...): ...
    def select(self): ...
    def scalar(self): ...
    def execute(self): ...
    def self_group(self, against: Optional[Any] = ...): ...

class _FunctionGenerator(object):
    opts: Any = ...
    def __init__(self, **opts) -> None: ...
    def __getattr__(self, name): ...
    def __call__(self, *c, **kwargs): ...

func: _FunctionGenerator = ...
modifier: _FunctionGenerator = ...

class Function(FunctionElement[_T]):
    __visit_name__: str = ...
    packagenames: Any = ...
    name: Any = ...
    type: TypeEngine[_T] = ...
    def __init__(self, name, *clauses, **kw) -> None: ...

class _GenericMeta(VisitableType):
    def __init__(cls, clsname, bases, clsdict) -> None: ...

class GenericFunction(Function[_T], metaclass=_GenericMeta):
    coerce_arguments: bool = ...
    packagenames: Any = ...
    clause_expr: Any = ...
    type: TypeEngine[_T] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class next_value(GenericFunction[_T]):
    type: TypeEngine[_T] = ...
    name: str = ...
    sequence: Sequence[_T] = ...
    def __init__(self, seq: Sequence[_T], **kw) -> None: ...

class AnsiFunction(GenericFunction[_T]):
    def __init__(self, **kwargs) -> None: ...

class ReturnTypeFromArgs(GenericFunction[_T]):
    def __init__(self, *args, **kwargs) -> None: ...

class coalesce(ReturnTypeFromArgs[Any]): ...
class max(ReturnTypeFromArgs[Any]): ...
class min(ReturnTypeFromArgs[Any]): ...
class sum(ReturnTypeFromArgs[Any]): ...

class now(GenericFunction[sqltypes.DateTime]): ...

class concat(GenericFunction[sqltypes.String]): ...

class char_length(GenericFunction[sqltypes.Integer]):
    def __init__(self, arg, **kwargs) -> None: ...

class random(GenericFunction[_T]): ...

class count(GenericFunction[sqltypes.Integer]):
    def __init__(self, expression: Optional[Any] = ..., **kwargs) -> None: ...

class current_date(AnsiFunction[sqltypes.Date]): ...

class current_time(AnsiFunction[sqltypes.Time]): ...

class current_timestamp(AnsiFunction[sqltypes.DateTime]): ...

class current_user(AnsiFunction[sqltypes.String]): ...

class localtime(AnsiFunction[sqltypes.DateTime]): ...

class localtimestamp(AnsiFunction[sqltypes.DateTime]): ...

class session_user(AnsiFunction[sqltypes.String]): ...

class sysdate(AnsiFunction[sqltypes.DateTime]): ...

class user(AnsiFunction[sqltypes.String]): ...

class array_agg(GenericFunction[sqltypes.ARRAY[_T]], Generic[_T]): ...

class OrderedSetAgg(GenericFunction[_T]):
    array_for_multi_clause: bool = ...
    def within_group_type(self, within_group): ...

class mode(OrderedSetAgg[_T]): ...

class percentile_cont(OrderedSetAgg[Any]):
    array_for_multi_clause: bool = ...

class percentile_disc(OrderedSetAgg[Any]):
    array_for_multi_clause: bool = ...

class rank(GenericFunction[sqltypes.Integer]): ...

class dense_rank(GenericFunction[sqltypes.Integer]): ...

class percent_rank(GenericFunction[sqltypes.Numeric]): ...

class cume_dist(GenericFunction[sqltypes.Numeric]): ...
