[case testTypeClause]
from typing import Any

from sqlalchemy import Integer
from sqlalchemy.sql.elements import TypeClause

clause = TypeClause(Integer())
reveal_type(clause.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.Integer*'
[out]

[case testNull]
from typing import Any

from sqlalchemy.sql.elements import Null

null = Null()
reveal_type(null.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.NullType'
[out]

[case testFalse_]
from typing import Any

from sqlalchemy.sql.elements import False_

false_ = False_()
reveal_type(false_.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.Boolean'
[out]

[case testTrue_]
from typing import Any

from sqlalchemy.sql.elements import True_

true_ = True_()
reveal_type(true_.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.Boolean'
[out]

[case testTupleInferred]
from typing import Any

from sqlalchemy import Boolean
from sqlalchemy.sql.elements import Tuple, Null, False_

tp = Tuple(Null(), False_())
reveal_type(tp.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.NullType*'
[out]

[case testTupleExplicit]
from typing import Any

from sqlalchemy import Boolean
from sqlalchemy.sql.elements import Tuple, Null, False_

tp = Tuple(Null(), False_(), type_=Boolean)
reveal_type(tp.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.Boolean*'
[out]

[case testTupleExplicitInstance]
from typing import Any

from sqlalchemy import Boolean
from sqlalchemy.sql.elements import Tuple, Null, False_

tp = Tuple(Null(), False_(), type_=Boolean())
reveal_type(tp.type)  # E: Revealed type is 'sqlalchemy.sql.sqltypes.Boolean*'
[out]

[case testCase]
from typing import Any, List

from sqlalchemy import Column, case

column: Column[Any]
lst: List[Any]
reveal_type(case(value=column, whens={item: i for i, item in enumerate(lst)}))  # E: Revealed type is 'sqlalchemy.sql.elements.Case[builtins.int*]'
[out]

[case testCast]
from typing import Any, Set

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, ARRAY, cast

Base: Any = declarative_base()

class Model(Base):
    __tablename__ = 'users'
    tags = Column(ARRAY(String(16)))

tags: Set[str] = set()
reveal_type(cast(tags, Model.tags.type))  # E: Revealed type is 'sqlalchemy.sql.elements.Cast[sqlalchemy.sql.type_api.TypeEngine*[builtins.list*[builtins.str*]]]'
[out]

